#!/bin/bash

function _pau_die {
    [[ -z "$1" ]] || echo "$1"
    exit 1
}

function _pau_usage() {
    cat <<USAGE

Example:

    # Installs ccdiff from App::ccdiff to a self-contained local::lib directory,
    # then expose ccdiff to ~/.local/bin/ccdiff
    pau install ccdiff

    # ditto for perlfind from App::perlfind
    pau install perlfind

    # Installs mbtiny from App::ModuleBuildTiny
    pau install mbtiny -M App::ModuleBuildTiny

    # Installs perlcritic with a few plugins
    pau install perlcritic -M Perl::Critic -M Perl::Critic::Pulp -M Perl::Critic::TooMuchCode

    # List installed units
    pau list

    # Deletes perlfind
    pau delete perlfind

USAGE
}

function _pau_shim {
    local APP APPDIR SHIM

    [[ -z "$1" ]] && _pau_die "ERROR: an app name is required"

    echo -n "# Creating shim... "

    APP=$1
    APPDIR="$HOME/.local/pau/apps/$APP"
    SHIM="$HOME/.local/pau/shims/$APP"

    mkdir -p "$HOME/.local/pau/shims"

    cat <<EOF > "$SHIM"
#!/bin/bash
export PATH=$APPDIR/bin:$PATH
export PERL5LIB=$APPDIR/lib/perl5
exec $APPDIR/bin/perl $APPDIR/bin/$NAME "\$@"
EOF

    chmod +x "$SHIM"

    echo "DONE"
}

function _pau_link {
    local APP SHIM LINK

    [[ -z "$1" ]] && _pau_die "ERROR: an app name is required"

    echo -n "# Creating link..."

    APP=$1
    SHIM="$HOME/.local/pau/shims/$APP"
    LINK="$HOME/.local/bin/$APP"

    ln -s "$SHIM" "$LINK" || _pau_die "ERROR: Failed to create links to shim"

    echo "DONE"
}

function _pau_inject_dist {
    local APP DIST APPDIR

    [[ -z "$1" ]] && _pau_die "ERROR: an app name is required"
    [[ -z "$2" ]] && _pau_die "ERROR: an dist name is required"

    APP=$1
    DIST=$2

    APPDIR="$HOME/.local/pau/apps/$APP"

    echo -n "# Injecting $DIST... "
    cpm install -L "$APPDIR" "$DIST" >/dev/null 2>&1 || _pau_die
    echo "DONE"
}

function _pau_cmd_inject {
    local APP DIST
    [[ -z "$1" ]] && _pau_die "ERROR: an app name is required"
    [[ -z "$2" ]] && _pau_die "ERROR: at least one dist name is required"

    APP=$1
    shift

    for DIST in "$@"
    do
        _pau_inject_dist "$APP" "$DIST"
    done
}

function _pau_make_app_dir {
    local APP APPDIR
    APP=$1
    APPDIR="$HOME/.local/pau/apps/$APP"

    [[ -e "$APPDIR" ]] && _pau_die "ERROR: $APPDIR already exists."

    echo "# Making the appdir for $NAME"
    mkdir -p "$APPDIR"

    mkdir -p "$APPDIR/bin/"
    ln -s "$(which perl)" "$APPDIR/bin/perl"

    echo -n "$APPDIR"
}

function _pau_cmd_install {
    local APPDIR OPTIND DISTS o

    NAME=$1
    shift

    [[ -z "$NAME" ]] && _pau_die "ERROR: an app name is required."

    DISTS=()
    while getopts M: o; do
          case "$o" in
              M)
                  DISTS+=("$OPTARG")
                  ;;
              *)
                  _pau_die "Unknown option: $OPTARG"
                  ;;
          esac
    done

    shift $((OPTIND-1))

    [[ ${#DISTS} -eq 0 ]] && DISTS=("App::$NAME")

    APPDIR=$(_pau_make_app_dir "$NAME")

    [[ -e "$HOME/.local/bin/$NAME" ]] && _pau_die "ERROR: $HOME/.local/bin/$NAME already exists."
    [[ -f "$HOME/.local/pau/shims/$NAME" ]] && _pau_die "ERROR: $NAME already exists."


    for dist in "${DISTS[@]}"
    do
        _pau_inject_dist "$NAME" "$dist" || _pau_die "Failed to inject $dist"
    done

    _pau_shim "$NAME"
    _pau_link "$NAME"

    echo "# $NAME is successfully installed"
}

function _pau_cmd_delete {
    local APP APPDIR SHIM LINK

    APP=$1

    [[ -z "$APP" ]] && _pau_die "ERROR: an app name is required"

    APPDIR="$HOME/.local/pau/apps/$APP"
    SHIM="$HOME/.local/pau/shims/$APP"
    LINK="$HOME/.local/bin/$APP"

    [[ -d $APPDIR ]] || _pau_die "ERROR: $APPDIR does not exists."
    [[ -f $SHIM ]] || _pau_die "ERROR: $SHIM does not exists."
    [[ -L $LINK ]] || _pau_die "ERROR: $LINK is not managed by pau"
    [[ $(readlink "$LINK") == "$SHIM" ]] || _pau_die "ERROR: $LINK is not managed by pau"

    rm "$LINK"
    rm "$SHIM"
    rm -rf "$APPDIR"
}

function _pau_cmd_list {
    \ls -1 ~/.local/pau/apps/
}

function _pau_cmd_pp {
    local APP APPDIR OPTIND OPT output perlversion

    which pp >/dev/null 2>&1 || _pau_die "Not found: pp. This command depends on pp from PAR::Pacaker."

    APP=$1
    [[ -z "$APP" ]] && _pau_die "ERROR: an app name is required"

    shift

    while getopts o: OPT; do
        case "$OPT" in
            o)
                output="$OPTARG"
                ;;
            *)
                _pau_die "Unknown option: $OPTARG"
                ;;
        esac
    done

    [[ -z "$output" ]] && output=$APP

    APPDIR="$HOME/.local/pau/apps/$APP"
    perlversion=$("$APPDIR/bin/perl" -MConfig -e "print \$Config{version}")
    pp  -I "$APPDIR/lib/perl5" \
        -a "$APPDIR/lib/perl5/;$perlversion/" \
        -o "$output" \
        "$APPDIR/bin/$APP" \
        && echo "DONE: $output"
}

function _pau_main {
    local cmd

    cmd=$1
    # main

    case $cmd in
        install)
            shift
            _pau_cmd_install "$@"
            hash -r
            ;;
        delete|uninstall)
            shift
            _pau_cmd_delete "$@"
            hash -r
            ;;
        inject)
            shift
            _pau_cmd_inject "$@"
            ;;
        list)
            shift
            _pau_cmd_list
            ;;
        pp)
            shift
            _pau_cmd_pp "$@"
            ;;
        -h|help|"")
            _pau_usage
            ;;
        *)
            echo "Unknown command: $1"
            ;;
    esac
}

_pau_main "$@"
