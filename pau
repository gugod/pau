#!/bin/bash

function _pau_die {
    [[ -z "$1" ]] || echo "$1"
    exit 1
}

function _pau_usage() {
    cat <<USAGE

Example:

    # Installs ccdiff from App::ccdiff to a self-contained local::lib directory,
    # then expose ccdiff to ~/.local/bin/ccdiff
    pau install ccdiff

    # ditto for perlfind from App::perlfind
    pau install perlfind

    # Installs mbtiny from App::ModuleBuildTiny
    pau install -M App::ModuleBuildTiny mbtiny

    # List installed units
    pau list

    # Deletes perlfind
    pau delete perlfind

USAGE
}

function _pau_shim {
    [[ -z "$1" ]] && _pau_die "ERROR: an app name is required"

    echo -n "# Creating shim... "

    NAME=$1

    APPDIR="$HOME/.local/pau/apps/$NAME"
    SHIM="$HOME/.local/pau/shims/$NAME"

    mkdir -p "$HOME/.local/pau/shims"

    cat <<EOF > "$SHIM"
#!/bin/bash
export PATH=$APPDIR/bin:$PATH
export PERL5LIB=$APPDIR/lib/perl5
exec $PERL $APPDIR/bin/$NAME "\$@"
EOF

    chmod +x "$SHIM"

    echo "DONE"
}

function _pau_link {
    [[ -z "$1" ]] && _pau_die "ERROR: an app name is required"

    echo -n "# Creating link..."

    NAME=$1
    SHIM="$HOME/.local/pau/shims/$NAME"
    LINK="$HOME/.local/bin/$NAME"

    ln -s "$SHIM" "$LINK" || _pau_die "ERROR: Failed to create links to shim"

    echo "DONE"
}

function _pau_inject_dist {
    local DIST APPDIR

    [[ -z "$1" ]] && _pau_die "ERROR: an dist name is required"
    [[ -z "$2" ]] && _pau_die "ERROR: an appdir is required"

    DIST=$1
    APPDIR=$2

    echo -n "# Injecting $DIST... "
    cpm install -L "$APPDIR" "$DIST" >/dev/null 2>&1 || _pau_die
    echo "DONE"
}

function _pau_cmd_install {
    DISTS=()

    local OPTIND o
    while getopts M: o; do
          case "$o" in
              M)
                  DISTS+=("$OPTARG")
                  ;;
              *)
                  _pau_die "Unknown option: $OPTARG"
                  ;;
          esac
    done

    shift $((OPTIND-1))

    NAME=$1

    [[ -z "$NAME" ]] && _pau_die "ERROR: an app name is required."
    [[ ${#DISTS} -eq 0 ]] && DISTS=("App::$NAME")

    [[ -e "$HOME/.local/bin/$NAME" ]] && _pau_die "ERROR: $HOME/.local/bin/$NAME already exists."
    [[ -f "$HOME/.local/pau/shims/$NAME" ]] && _pau_die "ERROR: $NAME already exists."

    APPDIR="$HOME/.local/pau/apps/$NAME"

    [[ -d "$APPDIR" ]] && _pau_die "ERROR: $NAME already exists."

    echo "# Making the appdir for $NAME"
    mkdir -p "$APPDIR"

    for dist in "${DISTS[@]}"
    do
        _pau_inject_dist "$dist" "$APPDIR" || _pau_die "Failed to inject $dist"
    done

    _pau_shim "$NAME"
    _pau_link "$NAME"

    echo "# $NAME is successfully installed"
}

function _pau_cmd_delete {
    NAME=$1
    APPDIR="$HOME/.local/pau/apps/$NAME"
    SHIM="$HOME/.local/pau/shims/$NAME"
    LINK="$HOME/.local/bin/$NAME"

    [[ -d $APPDIR ]] || _pau_die "ERROR: $APPDIR does not exists."
    [[ -f $SHIM ]] || _pau_die "ERROR: $SHIM does not exists."
    [[ -L $LINK ]] || _pau_die "ERROR: $LINK is not managed by pau"
    [[ $(readlink "$LINK") == "$SHIM" ]] || _pau_die "ERROR: $LINK is not managed by pau"

    rm "$LINK"
    rm "$SHIM"
    rm -rf "$APPDIR"
}

function _pau_cmd_list {
    \ls -1 ~/.local/pau/apps/
}

function _pau_cmd_pp {
    NAME=$1
    shift

    local OPTIND OPT output
    while getopts o: OPT; do
          case "$OPT" in
              o)
                  output="$OPTARG"
                  ;;
              *)
                  _pau_die "Unknown option: $OPTARG"
                  ;;
          esac
    done

    [[ -z "$output" ]] && output=$NAME

    perlversion=$(perl -MConfig -e 'print $Config{version}')
    pp  -I "$HOME/.local/pau/apps/$NAME/lib/perl5" \
        -a "$HOME/.local/pau/apps/$NAME/lib/perl5/;$perlversion/" \
        -o "$output" \
        "$HOME/.local/pau/apps/$NAME/bin/$NAME" \
        && echo "DONE: $output"
}

function _pau_main {
    cmd=$1
    # main
    PERL=$(which perl)

    case $cmd in
        install)
            shift
            _pau_cmd_install "$@"
            hash -r
            ;;
        delete)
            shift
            _pau_cmd_delete "$@"
            hash -r
            ;;
        list)
            shift
            _pau_cmd_list
            ;;
        pp)
            shift
            _pau_cmd_pp "$@"
            ;;
        -h|help|"")
            _pau_usage
            ;;
        *)
            echo "Unknown command: $1"
            ;;
    esac
}

_pau_main "$@"
